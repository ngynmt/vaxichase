{"version":3,"sources":["components/VaxTable.js","components/Landing.js","components/VaxMap.js","components/RecordEntry.js","App.js","index.js"],"names":["VaxTable","locations","reports","className","TableContainer","component","Paper","Table","aria-label","TableHead","TableRow","TableCell","align","TableBody","map","location","attempts","filter","report","locationId","id","length","successes","success","rate","scope","name","Landing","mapStyles","height","position","width","GoogleApiWrapper","apiKey","process","google","useState","activeMarker","setActiveMarker","activeMarkerId","setActiveMarkerId","selectedPlace","selectPlace","showMarkerInfo","toggleInfoWindow","zoom","style","initialCenter","lat","lng","idx","onClick","props","marker","markerId","updateMarker","visible","onClose","RecordEntry","CREATE_LOCATION","gql","CREATE_REPORT","useMutation","createLocation","createReport","address","updateAddress","latLng","updateLatLng","wasSuccess","updateSuccess","onSubmit","e","preventDefault","locationHash","hash","variables","window","reload","value","onChange","onSelect","split","geocodeByAddress","then","results","getLatLng","catch","error","console","getInputProps","suggestions","getSuggestionItemProps","loading","TextField","label","suggestion","active","backgroundColor","cursor","key","description","FormControl","FormLabel","RadioGroup","row","target","FormControlLabel","control","Radio","Button","disabled","variant","color","type","READ_LOCATIONS","READ_REPORTS","App","useQuery","data","reportData","reportLoading","reportError","modalIsOpen","toggleModal","Modal","open","client","ApolloClient","uri","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cd0ff083.chunk.js","sourcesContent":["import React from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\nfunction VaxTable({ locations, reports }) {\n  return (\n    <div className=\"gutters\">\n      <TableContainer component={Paper}>\n        <Table aria-label=\"simple table\">\n          <TableHead>\n            <TableRow>\n              <TableCell>Location</TableCell>\n              <TableCell align=\"right\">Attempts</TableCell>\n              <TableCell align=\"right\">Success Rate</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {locations.map((location) => {\n              let attempts = reports?.filter(report => report.locationId === location.id).length;\n              let successes = reports?.filter(report => report.locationId === location.id && report.success).length;\n              let rate = attempts === 0 ? 0 : (successes / attempts) * 100;\n              return (\n                <TableRow key={location.id}>\n                  <TableCell component=\"th\" scope=\"row\">{location.name}</TableCell>\n                  <TableCell align=\"right\">{attempts}</TableCell>\n                  <TableCell align=\"right\">{rate + '%'}</TableCell>\n                </TableRow>\n              );\n            })}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </div>\n  )\n};\n\nexport default VaxTable;","import React from 'react';\n\nfunction Landing() {\n  return (\n    <div className=\"landing\">\n      <h1>Vaxichase</h1>\n      <div className=\"emojis\">\n      üíâüèÉ‚Äç‚ôÇÔ∏èüèÉ‚Äç‚ôÄÔ∏èüèÉü¶†\n      </div>\n      <p>Did you know? Some COVID-19 vaccine doses are only usable for several hours after being thawed from their subzero storage temperature.\n        Prevent the waste of these doses by sharing your successful and failed attempts to get a leftover dose at the end of the day at a specific location.</p>\n    </div>\n  );\n};\n\nexport default Landing;","import React, { useState } from 'react';\nimport { Map, Marker, InfoWindow, GoogleApiWrapper } from 'google-maps-react';\n\nconst mapStyles = {\n  height: '400px',\n  position: 'relative',\n  width: '100%'\n};\n\nfunction VaxMap({ locations, reports, google }) {\n  const [activeMarker, setActiveMarker] = useState({});\n  const [activeMarkerId, setActiveMarkerId] = useState(null);\n  const [selectedPlace, selectPlace] = useState({ name: '' });\n  const [showMarkerInfo, toggleInfoWindow] = useState(false);\n\n  const updateMarker = (props, marker, markerId) => {\n    selectPlace(props);\n    setActiveMarker(marker);\n    setActiveMarkerId(markerId);\n    toggleInfoWindow(true);\n  }\n\n  return (\n      <Map\n        google={google}\n        zoom={12}\n        style={mapStyles}\n        initialCenter={\n          {\n            lat: 37.7749,\n            lng: -122.4194\n          }\n        }\n    >\n      {\n        locations.map((location, idx) => {\n          return (\n            <Marker\n              key={idx}\n              name={location.name}\n              onClick={(props, marker) => updateMarker(props, marker, location.id)}\n              position={location.position}>\n              </Marker>\n          );\n        })\n      }\n      <InfoWindow visible={showMarkerInfo} marker={activeMarker} onClose={() => toggleInfoWindow(false)}>\n        <div className=\"marker-info\">\n          <h3>{selectedPlace.name || 'Vaccination Center'}</h3>\n          <p>Attempts: {reports?.filter(report => report.locationId === activeMarkerId).length || 0}</p>\n          <p>Success: {reports?.filter(report => report.locationId === activeMarkerId && report.success).length || 0}</p>\n          <p>Failures: {reports?.filter(report => report.locationId === activeMarkerId && !report.success).length || 0}</p>\n        </div>\n      </InfoWindow>\n    </Map>\n  );\n};\n\nexport default GoogleApiWrapper({\n  apiKey: process.env.REACT_APP_GAPI_KEY\n})(VaxMap);","import React, { useState } from 'react';\nimport gql from 'graphql-tag';\nimport { useMutation } from '@apollo/react-hooks';\nimport PlacesAutocomplete, {\n  geocodeByAddress,\n  getLatLng,\n} from 'react-places-autocomplete';\nimport hash from 'object-hash';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\n\nfunction RecordEntry({ locations }) {\n  const CREATE_LOCATION = gql`\n  mutation CreateLocation($name: String!, $id: String!, $position: LatLngInput!) {\n    createLocation(name: $name, id: $id, position: $position)\n  }\n  `;\n\n  const CREATE_REPORT = gql`\n    mutation CreateReport($success: Boolean!, $locationId: String!) {\n      createReport(success: $success, locationId: $locationId)\n    }\n  `;\n\n  // const REMOVE_LOCATION = gql`\n  // mutation RemoveLocation($id: String!) {\n  //   removeLocation(id: $id)\n  // }\n  // `;\n\n  const [createLocation] = useMutation(CREATE_LOCATION);\n  const [createReport] = useMutation(CREATE_REPORT);\n  const [address, updateAddress] = useState('');\n  const [latLng, updateLatLng] = useState(null);\n  const [wasSuccess, updateSuccess] = useState('true');\n\n  const handleSelect = (address) => {\n    updateAddress(address.split(',')[0]);\n    geocodeByAddress(address)\n    .then(results => getLatLng(results[0]))\n    .then(latLng => updateLatLng(latLng))\n    .catch(error => console.error('Error', error));\n  }\n  \n  return (\n    <div className=\"record-entry modal\">\n      <h1>Record Attempt</h1>\n      <form onSubmit={e => {\n        e.preventDefault();\n        let locationHash = hash(latLng);\n        if (locations.filter((location) => location.id === locationHash).length === 0) {\n          createLocation({ variables: {\n            name: address,\n            id: locationHash,\n            position: latLng\n          }});\n        }\n\n        createReport({\n          variables: {\n            success: wasSuccess === 'true',\n            locationId: locationHash,\n          }\n        })\n        window.location.reload();\n      }}>\n        <PlacesAutocomplete\n          value={address}\n          onChange={updateAddress}\n          onSelect={handleSelect}>\n          {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\n            <div>\n              <TextField\n                {...getInputProps({\n                  label: 'Enter vaccine location',\n                  className: 'location-search-input',\n                })}\n              />\n              <div className=\"autocomplete-dropdown-container\">\n                {loading && <div>Loading...</div>}\n                {suggestions.map((suggestion, idx) => {\n                  const className = suggestion.active\n                    ? 'suggestion-item--active'\n                    : 'suggestion-item';\n                  // inline style for demonstration purpose\n                  const style = suggestion.active\n                    ? { backgroundColor: '#fafafa', cursor: 'pointer' }\n                    : { backgroundColor: '#ffffff', cursor: 'pointer' };\n                  return (\n                    <div\n                      {...getSuggestionItemProps(suggestion, {\n                        className,\n                        style,\n                      })}\n\n                      key={idx}\n                    >\n                      <span>{suggestion.description}</span>\n                    </div>\n                  );\n                })}\n              </div>\n            </div>\n          )}\n        </PlacesAutocomplete>\n        <section className=\"form-section\">\n          <FormControl component=\"fieldset\">\n            <FormLabel component=\"legend\">Did you successfully get vaccinated?</FormLabel>\n            <RadioGroup row className=\"radio-group\" aria-label=\"success\" value={wasSuccess} onChange={(e) => updateSuccess(e.target.value)}>\n              <FormControlLabel value=\"true\" control={<Radio />} label=\"yes\" />\n              <FormControlLabel value=\"false\" control={<Radio />} label=\"no\" />\n            </RadioGroup>\n          </FormControl>\n        </section>\n        <Button disabled={!latLng} variant=\"contained\" color=\"primary\" className=\"button--fw btn btn-primary px-5 my-2\" type=\"submit\">Submit</Button>\n      </form>      \n    </div>\n  );\n}\n\nexport default RecordEntry;","import React, { useState } from 'react';\nimport './App.css';\nimport VaxTable from './components/VaxTable';\nimport Landing from './components/Landing';\nimport VaxMap from './components/VaxMap';\nimport { Button, Modal } from '@material-ui/core';\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport RecordEntry from './components/RecordEntry';\n\nconst READ_LOCATIONS = gql`\n  query locations {\n    locations {\n      id\n      name\n      position {\n        lat\n        lng\n      }\n    }\n  }\n`;\n\nconst READ_REPORTS = gql`\n  query reports {\n    reports {\n      locationId\n      success\n    }\n  }\n`;\n\nfunction App() {\n  let { data, loading, error } = useQuery(READ_LOCATIONS);\n  let { data: reportData, loading: reportLoading, error: reportError } = useQuery(READ_REPORTS);\n  const [modalIsOpen, toggleModal] = useState(false);\n\n  // loading = true;\n  if (loading || reportLoading ) return <Landing />;\n  if (error || reportError) return <p>An error occurred.</p>;\n  if (!data) return <p>Records not found.</p>;\n\n  return (\n    <div className=\"app\">\n      <Modal open={modalIsOpen} onClose={() => toggleModal(false)} className=\"modal-container\">\n        <RecordEntry locations={data.locations} reports={reportData?.reports} />\n      </Modal>\n      <div className=\"vax-map\">\n        <VaxMap locations={data.locations} reports={reportData?.reports} />\n      </div>\n      <div className=\"gutters\">\n        <Button variant=\"contained\" color=\"primary\" className=\"button--fw\" onClick={() => toggleModal(true)}>Add Entry</Button>\n      </div>\n      <VaxTable locations={data.locations} reports={reportData?.reports} />\n    </div>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from '@apollo/react-hooks';\n\nconst client = new ApolloClient({\n  uri: 'http://localhost:4000/graphql'\n});\n\nReactDOM.render(<ApolloProvider client={client}>\n  <App />\n</ApolloProvider>, document.getElementById('root'));"],"sourceRoot":""}